DROP TABLE IF EXISTS BorrowedBooks;
DROP TABLE IF EXISTS Books;
DROP TABLE IF EXISTS Authors;
DROP TABLE IF EXISTS Members;

-- THE TABLE 
CREATE TABLE Authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    birth_year INT
);

-- Create Books Table
CREATE TABLE Books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author_id INT,
    published_year INT,
    genre VARCHAR(255),
    FOREIGN KEY (author_id) REFERENCES Authors(author_id)
);

-- Create Members Table
CREATE TABLE Members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    join_date DATE
);

-- Create BorrowedBooks Table
CREATE TABLE BorrowedBooks (
    borrow_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    member_id INT,
    borrow_date DATE,
    return_date DATE NULL,
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);

-- Insert at least 5 Authors
INSERT INTO Authors (name, birth_year) VALUES 
('Stephen King', 1947),
('J.R.R. Tolkien', 1892),
('Jane Austen', 1775),
('F. Scott Fitzgerald', 1896),
('Isaac Asimov', 1920);

-- Insert at least 5 Books
INSERT INTO Books (title, author_id, published_year, genre) VALUES
('The Shining', 1, 1977, 'Horror'),
('The Lord of the Rings', 2, 1954, 'Fantasy'),
('Pride and Prejudice', 3, 1813, 'Romance'),
('The Great Gatsby', 4, 1925, 'Fiction'),
('Foundation', 5, 1951, 'Science Fiction');

-- Insert at least 3 Members
INSERT INTO Members (name, email, join_date) VALUES
('David Lee', 'david.lee@example.com', '2024-01-10'),
('Sophia Martinez', 'sophia.m@example.com', '2024-02-05'),
('Ethan Walker', 'ethan.w@example.com', '2024-03-15');

-- Insert BorrowedBooks Data
INSERT INTO BorrowedBooks (book_id, member_id, borrow_date, return_date) VALUES
(1, 1, '2024-02-01', NULL), -- Not returned yet
(2, 2, '2024-02-10', '2024-02-20'),
(3, 3, '2024-02-15', NULL); -- Not returned yet

-- Query 1: Find all books published after the year 2000
SELECT * FROM Books WHERE published_year > 2000;

-- Query 2: Get a list of members who have borrowed at least one book
SELECT DISTINCT Members.name, Members.email
FROM Members
JOIN BorrowedBooks ON Members.member_id = BorrowedBooks.member_id;

-- Query 3: Retrieve all books along with their author's name
SELECT Books.title, Authors.name AS author_name
FROM Books
JOIN Authors ON Books.author_id = Authors.author_id;

-- Query 4: Find all books that have been borrowed but not yet returned
SELECT Books.title, Members.name AS borrowed_by
FROM BorrowedBooks
JOIN Books ON BorrowedBooks.book_id = Books.book_id
JOIN Members ON BorrowedBooks.member_id = Members.member_id
WHERE BorrowedBooks.return_date IS NULL;

-- Query 5: Count how many books each author has written
SELECT Authors.name AS author_name, COUNT(Books.book_id) AS book_count
FROM Authors
JOIN Books ON Authors.author_id = Books.author_id
GROUP BY Authors.name;
