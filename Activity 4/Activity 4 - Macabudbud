CREATE TABLE Authors (
    author_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    birth_year INT
);

CREATE TABLE Books (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    author_id INT,
    published_year INT,
    genre VARCHAR(100),
    FOREIGN KEY (author_id) REFERENCES Authors(author_id)
);

CREATE TABLE Members (
    member_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    join_date DATE
);

CREATE TABLE BorrowedBooks (
    borrow_id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT,
    member_id INT,
    borrow_date DATE,
    return_date DATE NULL,
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);

INSERT INTO Authors (name, birth_year) VALUES
('J.K. Rowling', 1965),
('George Orwell', 1903),
('Jane Austen', 1775),
('Mark Twain', 1835),
('Ernest Hemingway', 1899);


INSERT INTO Books (title, author_id, published_year, genre) VALUES
('Harry Potter and the Sorcerer''s Stone', 1, 1997, 'Fantasy'),
('1984', 2, 1949, 'Dystopian'),
('Pride and Prejudice', 3, 1813, 'Romance'),
('The Adventures of Tom Sawyer', 4, 1876, 'Adventure'),
('The Old Man and the Sea', 5, 1952, 'Fiction');

INSERT INTO Members (name, email, join_date) VALUES
('Alice Johnson', 'alice@example.com', '2020-05-15'),
('Bob Smith', 'bob@example.com', '2019-08-22'),
('Charlie Brown', 'charlie@example.com', '2021-11-10');

INSERT INTO BorrowedBooks (book_id, member_id, borrow_date, return_date) VALUES
(1, 1, '2023-01-10', '2023-01-25'),
(2, 2, '2023-02-15', NULL),
(3, 3, '2023-03-05', '2023-03-20'),
(4, 1, '2023-04-01', NULL),
(5, 2, '2023-05-12', '2023-05-30');

-- 1. Find all books published after the year 2000
SELECT title, published_year FROM Books WHERE published_year > 2000;

-- 2. Get a list of members who have borrowed at least one book
SELECT DISTINCT M.name FROM Members M 
JOIN BorrowedBooks BB ON M.member_id = BB.member_id;

-- 3. Retrieve all books along with their author's name
SELECT B.title, A.name AS author_name FROM Books B 
JOIN Authors A ON B.author_id = A.author_id;

-- 4. Find all books that have been borrowed but not yet returned
SELECT B.title FROM Books B 
JOIN BorrowedBooks BB ON B.book_id = BB.book_id 
WHERE BB.return_date IS NULL;

-- 5. Count how many books each author has written
SELECT A.name, COUNT(B.book_id) AS book_count FROM Authors A 
LEFT JOIN Books B ON A.author_id = B.author_id 
GROUP BY A.name;
