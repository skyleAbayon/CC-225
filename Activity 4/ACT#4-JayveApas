CREATE TABLE AUTHORS (
  author_id INTEGER primary key AUTO_INCREMENT,
  name varchar(100) not null,
  birth_year INTEGER
);

CREATE TABLE BOOKS (
book_id INTEGER primary key AUTO_INCREMENT,
title varchar(255) not null,
author_id INTEGER,
FOREIGN KEY (author_id) REFERENCES AUTHORS(author_id),
published_year INTEGER,
genre varchar(200)
);

CREATE TABLE MEMBERS(
member_id INTEGER primary key AUTO_INCREMENT,
name varchar(100) not null,
email varchar(255) unique not null,
join_date date
);

CREATE TABLE BORROWEDBOOKS(
borrow_id INTEGER primary key AUTO_INCREMENT,
book_id INTEGER,
FOREIGN KEY (book_id) REFERENCES BOOKS(book_id),
member_id INTEGER,
FOREIGN KEY (member_id) REFERENCES MEMBERS(member_id),
borrow_date date,
return_date date null
);

-- insert
-- NO.1
INSERT INTO AUTHORS(name, birth_year) VALUES ("Clark", 1986);
INSERT INTO AUTHORS(name, birth_year) VALUES ("Vincent", 1988);
INSERT INTO AUTHORS(name, birth_year) VALUES ("John", 1995);
INSERT INTO AUTHORS(name, birth_year) VALUES ("Kim", 1999);
INSERT INTO AUTHORS(name, birth_year) VALUES ("Marvin", 2000);
INSERT INTO BOOKS(title, genre, published_year, author_id) VALUES ("Modus", "N/A", 2000, 1);
INSERT INTO BOOKS(title, genre, published_year, author_id) VALUES ("Mamas' Boy", "N/A", 2001, 2);
INSERT INTO BOOKS(title, genre, published_year, author_id) VALUES ("Lapel", "N/A", 2002, 3);
INSERT INTO BOOKS(title, genre, published_year, author_id) VALUES ("Kabataan", "N/A", 2003, 4);
INSERT INTO BOOKS(title, genre, published_year, author_id) VALUES ("Missionary", "N/A", 2004, 5);
INSERT INTO MEMBERS(name, email, join_date) VALUES ("Lala", "lala@gmai.com", '1999-02-21');
INSERT INTO MEMBERS(name, email, join_date) VALUES ("Mike", "mike@gmai.com", '1999-11-11');
INSERT INTO MEMBERS(name, email, join_date) VALUES ("Henry", "henry@gmai.com", '2000-01-09');
INSERT INTO BORROWEDBOOKS(book_id, member_id, borrow_date, return_date) VALUES (1, 2, '2000-01-22', null);

-- fetch 
-- No.2
SELECT * FROM BOOKS WHERE published_year > 2000;

-- NO.3
SELECT DISTINCT MEMBERS.name
FROM MEMBERS
JOIN BORROWEDBOOKS ON MEMBERS.member_id = BORROWEDBOOKS.member_id;

-- NO.4
SELECT BOOKS.title, AUTHORS.name
FROM BOOKS
JOIN AUTHORS ON BOOKS.author_id = AUTHORS.author_id;

-- NO.5
SELECT BOOKS.title
FROM BOOKS
JOIN BORROWEDBOOKS ON BOOKS.book_id = BORROWEDBOOKS.book_id
WHERE BORROWEDBOOKS.return_date IS NULL;

-- NO.6
SELECT AUTHORS.name, COUNT(BOOKS.book_id)
FROM AUTHORS
LEFT JOIN BOOKS ON AUTHORS.author_id = BOOKS.author_id
GROUP BY AUTHORS.name;
