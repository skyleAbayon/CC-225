-- Creating Authors Table
CREATE TABLE Authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    birth_year INT
);

-- Creating Books Table
CREATE TABLE Books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author_id INT,
    published_year INT,
    genre VARCHAR(100),
    FOREIGN KEY (author_id) REFERENCES Authors(author_id)
);

-- Creating Members Table
CREATE TABLE Members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    join_date DATE
);

-- Creating Borrowed_Books Table
CREATE TABLE Borrowed_Books (
    borrow_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    member_id INT,
    borrow_date DATE,
    return_date DATE NULL,
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);

-- Inserting sample data into Authors Table
INSERT INTO Authors (name, birth_year) VALUES 
('J.K. Rowling', 1965), 
('George Orwell', 1903), 
('J.R.R. Tolkien', 1892), 
('Agatha Christie', 1890), 
('Stephen King', 1947);

-- Inserting sample data into Books Table
INSERT INTO Books (title, author_id, published_year, genre) VALUES 
('Harry Potter and the Sorcerer\'s Stone', 1, 1997, 'Fantasy'),
('1984', 2, 1949, 'Dystopian'),
('The Hobbit', 3, 1937, 'Fantasy'),
('Murder on the Orient Express', 4, 1934, 'Mystery'),
('The Shining', 5, 1977, 'Horror');

-- Inserting sample data into Members Table
INSERT INTO Members (name, email, join_date) VALUES 
('Alice Johnson', 'alice@example.com', '2023-01-15'),
('Bob Smith', 'bob@example.com', '2023-03-22'),
('Charlie Brown', 'charlie@example.com', '2023-05-10');

-- Inserting sample data into Borrowed_Books Table
INSERT INTO Borrowed_Books (book_id, member_id, borrow_date, return_date) VALUES 
(1, 1, '2024-02-01', NULL), 
(2, 2, '2024-02-05', '2024-02-15'), 
(3, 3, '2024-02-10', NULL);

-- Query to find books published after the year 2000
SELECT * FROM Books WHERE published_year > 2000;

-- Query to get a list of members who have borrowed at least one book
SELECT DISTINCT Members.member_id, Members.name, Members.email
FROM Members
JOIN Borrowed_Books ON Members.member_id = Borrowed_Books.member_id;

-- Query to retrieve all books along with their author's name
SELECT Books.book_id, Books.title, Books.published_year, Books.genre, Authors.name AS author_name
FROM Books
JOIN Authors ON Books.author_id = Authors.author_id;

-- Query to find all books that have been borrowed but not yet returned
SELECT Books.book_id, Books.title, Members.name AS borrowed_by, Borrowed_Books.borrow_date
FROM Borrowed_Books
JOIN Books ON Borrowed_Books.book_id = Books.book_id
JOIN Members ON Borrowed_Books.member_id = Members.member_id
WHERE Borrowed_Books.return_date IS NULL;

-- Query to count how many books each author has written
SELECT Authors.name, COUNT(Books.book_id) AS book_count
FROM Authors
LEFT JOIN Books ON Authors.author_id = Books.author_id
GROUP BY Authors.name;
