
-- Create Authors table
CREATE TABLE Authors (
    author_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    birth_year INT NOT NULL
);

-- Create Books table
CREATE TABLE Books (
    book_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author_id INT REFERENCES Authors(author_id),
    published_year INT NOT NULL,
    genre VARCHAR(100) NOT NULL
);

-- Create Members table
CREATE TABLE Members (
    member_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    join_date DATE NOT NULL
);

-- Create BorrowedBooks table
CREATE TABLE BorrowedBooks (
    borrow_id SERIAL PRIMARY KEY,
    book_id INT REFERENCES Books(book_id),
    member_id INT REFERENCES Members(member_id),
    borrow_date DATE NOT NULL,
    return_date DATE
);

-- =====================
-- INSERT DATA
-- =====================

-- Insert authors
INSERT INTO Authors (name, birth_year) VALUES 
('Dan Brown', 1964),
('Harper Lee', 1926),
('Isaac Asimov', 1920),
('Arthur Conan Doyle', 1859),
('Neil Gaiman', 1960);

-- Insert books
INSERT INTO Books (title, author_id, published_year, genre) VALUES 
('The Da Vinci Code', 1, 2003, 'Thriller'),
('To Kill a Mockingbird', 2, 1960, 'Fiction'),
('Foundation', 3, 1951, 'Science Fiction'),
('Sherlock Holmes: A Study in Scarlet', 4, 1887, 'Mystery'),
('American Gods', 5, 2001, 'Fantasy');

-- Insert members
INSERT INTO Members (name, email, join_date) VALUES 
('Lee Haw', 'Leehaw123@gmail.com', '2023-05-10'),
('Jake Salamanca', 'j4keCatLamancs@gmail.com', '2022-12-01'),
('Joseph Ikinamada', 'sephKalmadaRiders@gmail.com', '2023-07-15');

-- Insert borrowed books (Returned and Not)
INSERT INTO BorrowedBooks (book_id, member_id, borrow_date, return_date) VALUES 
(1, 1, '2024-02-05', NULL),  -- Emma borrowed The Da Vinci Code, not returned yet
(2, 2, '2024-01-10', '2024-02-05'),  -- John borrowed To Kill a Mockingbird and returned it
(3, 3, '2024-01-20', NULL);  -- Sarah borrowed Foundation, not returned yet




-- 2. Find all books published after the year 2000
SELECT * FROM Books WHERE published_year > 2000;

-- 3. Get a list of members who have borrowed at least one book
SELECT DISTINCT Members.member_id, Members.name, Members.email
FROM Members
JOIN BorrowedBooks ON Members.member_id = BorrowedBooks.member_id;

-- 4. Retrieve all books along with their author's name
SELECT Books.title, Authors.name AS author_name
FROM Books
JOIN Authors ON Books.author_id = Authors.author_id;

-- 5. Find all books that have been borrowed but not yet returned
SELECT Books.title, Members.name AS borrowed_by, BorrowedBooks.borrow_date
FROM BorrowedBooks
JOIN Books ON BorrowedBooks.book_id = Books.book_id
JOIN Members ON BorrowedBooks.member_id = Members.member_id
WHERE BorrowedBooks.return_date IS NULL;

-- 6. Count how many books each author has written
SELECT Authors.name, COUNT(Books.book_id) AS book_count
FROM Authors
LEFT JOIN Books ON Authors.author_id = Books.author_id
GROUP BY Authors.name;
